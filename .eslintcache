[{"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\index.js":"1","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\App.js":"2","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\reportWebVitals.js":"3","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\MainComponent.js":"4","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\HeaderComponent.js":"5","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\menuComponents.js":"6","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\FooterComponent.js":"7","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\DishdetailComponent.js":"8","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\dishes.js":"9","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\configureStore.js":"10","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\HomeComponent.js":"11","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\reducer.js":"12","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\ContactComponent.js":"13","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\AboutComponent.js":"14","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\leaders.js":"15","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\comments.js":"16","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\promotions.js":"17","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\dishes.js":"18","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\leaders.js":"19","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\promotions.js":"20","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\comments.js":"21","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\ActionTypes.js":"22","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\ActionCreators.js":"23"},{"size":639,"mtime":1610481282432,"results":"24","hashOfConfig":"25"},{"size":620,"mtime":1611412825636,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":2589,"mtime":1611431155930,"results":"28","hashOfConfig":"25"},{"size":5056,"mtime":1611412393697,"results":"29","hashOfConfig":"25"},{"size":3604,"mtime":1610711372656,"results":"30","hashOfConfig":"25"},{"size":2564,"mtime":1611409204639,"results":"31","hashOfConfig":"25"},{"size":10301,"mtime":1611432845767,"results":"32","hashOfConfig":"25"},{"size":1490,"mtime":1610708641351,"results":"33","hashOfConfig":"25"},{"size":741,"mtime":1611427341885,"results":"34","hashOfConfig":"25"},{"size":1087,"mtime":1610708865448,"results":"35","hashOfConfig":"25"},{"size":446,"mtime":1611434726997,"results":"36","hashOfConfig":"25"},{"size":13007,"mtime":1611323600424,"results":"37","hashOfConfig":"25"},{"size":4466,"mtime":1610714967484,"results":"38","hashOfConfig":"25"},{"size":2382,"mtime":1610708706798,"results":"39","hashOfConfig":"25"},{"size":4279,"mtime":1610708732382,"results":"40","hashOfConfig":"25"},{"size":445,"mtime":1610708690562,"results":"41","hashOfConfig":"25"},{"size":197,"mtime":1611427344307,"results":"42","hashOfConfig":"25"},{"size":184,"mtime":1611426651704,"results":"43","hashOfConfig":"25"},{"size":196,"mtime":1611426640074,"results":"44","hashOfConfig":"25"},{"size":575,"mtime":1611435309047,"results":"45","hashOfConfig":"25"},{"size":41,"mtime":1611430524717,"results":"46","hashOfConfig":"25"},{"size":279,"mtime":1611430318544,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"ytoi1i",{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\index.js",[],["102","103"],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\App.js",["104","105","106"],"import logo from './logo.svg';\r\nimport React, { Component } from 'react';\r\nimport {Navbar, NavbarBrand} from 'reactstrap';\r\nimport './App.css';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport Main from \"./components/MainComponent\"\r\nimport { Provider } from 'react-redux';\r\nimport { ConfigureStore } from './redux/configureStore';\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n      <BrowserRouter>\r\n      <div>\r\n       <Main/>\r\n      </div>\r\n      </BrowserRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\reportWebVitals.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\MainComponent.js",["107"],"import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport Menu from './menuComponents';\r\nimport DishDetail from './DishdetailComponent';\r\n// import { DISHES } from '../shared/dishes';\r\n// import { COMMENTS } from '../shared/comments';\r\n// import { PROMOTIONS } from '../shared/promotions';\r\n// import { LEADERS } from '../shared/leaders';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { addComment } from '../redux/ActionCreators';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment))\r\n  }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n//   onDishSelect(dishId) {\r\n//     this.setState({ selectedDish: dishId});\r\n//   }\r\n  \r\n\r\n  render() {\r\n    const HomePage = () => {\r\n        return(\r\n          <Home \r\n          dish={this.props.dishes.filter((dish) => dish.featured)[0]}\r\n          promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\r\n          leader={this.props.leaders.filter((leader) => leader.featured)[0]}/>\r\n        );\r\n      }\r\n\r\n      const DishWithId = ({match}) => {\r\n        return(\r\n            <DishDetail dish={this.props.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]} \r\n              comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n              addComment={this.props.addComment} />\r\n        );\r\n      };\r\n\r\n      \r\n      \r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n        <Route path='/home' component={HomePage} />\r\n        <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n        <Route path='/menu/:dishId' component={DishWithId} />\r\n        <Route exact path='/contactus' component={Contact} />\r\n        <Route path='/aboutus' component={()=> <About leaders={this.props.leaders}/>} />\r\n        <Redirect to=\"/home\" />\r\n\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n// export default Main;","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\menuComponents.js",["108","109","110"],"import React, { Component } from 'react';\r\nimport { Media } from 'reactstrap';\r\n\r\nimport { Card, CardImg, CardImgOverlay,CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport DishDetail from './DishdetailComponent';\r\n\r\nfunction RenderMenuItem ({dish}) {\r\n    return (\r\n        <Card>\r\n            <Link to={`/menu/${dish.id}`} >\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = (props) => {\r\n\r\n    const menu = props.dishes.map((dish) => {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\"  key={dish.id}>\r\n                <RenderMenuItem dish={dish} />\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <div className=\"col-12\">\r\n                <h3>Menu</h3>\r\n                <hr />\r\n            </div>                \r\n        </div>\r\n        <div className=\"row\">\r\n            {menu}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n\r\n// class Menu extends Component {\r\n\r\n//     // constructor(props) {\r\n//     //     super(props);\r\n\r\n//     // //     this.state = {\r\n//     // //         selectedDish: null\r\n//     // //     }\r\n//     // }\r\n\r\n//     // onDishSelect(dish) {\r\n//     //     this.setState({ selectedDish: dish });\r\n//     // }\r\n\r\n//     // renderDish(dish) {\r\n//     //     if (dish != null)\r\n//     //         return (\r\n//     //         <div className=\"car\">\r\n//     //             <div className=\"\">\r\n//     //                 <Card>\r\n//     //                 <CardImg top src={dish.image} alt={dish.name} />\r\n//     //                 <CardBody>\r\n//     //                   <CardTitle>{dish.name}</CardTitle>\r\n//     //                   <CardText>{dish.description}</CardText>\r\n//     //                 </CardBody>\r\n//     //                     </Card>\r\n//     //                     </div>\r\n                        \r\n//     //                     <div className=\"co\"> \r\n//     //                     <Card>\r\n//     //                     hello\r\n//     //                     </Card>\r\n//     //                     </div>\r\n//     //                </div>            \r\n//     //         );\r\n//     //     else\r\n//     //         return (\r\n//     //             <div></div>\r\n//     //         );\r\n//     // }\r\n\r\n//     render() {\r\n//         const menu = this.props.dishes.map((dish) => {\r\n//             return (\r\n//                 <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n//                     <Card \r\n//                         onClick={() => this.props.onClick(dish.id)}>\r\n//                         <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n//                         <CardImgOverlay>\r\n//                             <CardTitle>{dish.name}</CardTitle>\r\n//                         </CardImgOverlay>\r\n//                     </Card>\r\n//                 </div>\r\n//             );\r\n//         });\r\n\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"row\">\r\n//                     {menu}\r\n//                 </div>\r\n                \r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Menu;","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\FooterComponent.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\DishdetailComponent.js",["111","112","113","114","115","116","117","118","119","120"],"import React, { Component, useState,useEffect } from 'react';\r\nimport { Media } from 'reactstrap';\r\nimport { Card, CardImg, Button, FormGroup, Input, Form,Row, Col, Label, CardText,CardBody,CardTitle, Breadcrumb, BreadcrumbItem, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n// const [isModalOpen, handleModal] = useState(false)\r\n\r\n\r\nconst required = (val) => {console.log(val && val.length,{val}); return val && val.length;}\r\nconst maxLength = (len) => (val) => {/*console.log({len,val});*/ return !(val) || (val.length <= len);}\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\n    function RenderDishComments(props){\r\n        const [isModalOpen, handleModal] = useState(false)\r\n        \r\n        // useEffect(() => {\r\n        //     console.log(\"useEffec being called again\")\r\n        // }, [isModalOpen])\r\n        \r\n\r\n        const handleComment = (e)=>{\r\n              handleModal(!isModalOpen)\r\n        }\r\n        \r\n        function handleSubmit(values) {\r\n            // console.log('Comment submitted is:' + JSON.stringify(values));\r\n            // alert('Comment submitted is: ' + JSON.stringify(values));\r\n            props.addComment(props.dishId, values.rating, values.author, values.comment)\r\n\r\n        }\r\n\r\n        const CommentForm=()=>{\r\n\r\n         return(    \r\n            <Modal isOpen={isModalOpen} toggle={()=>handleModal(!isModalOpen)}>\r\n            <ModalHeader toggle={handleComment}>Submit Comment</ModalHeader>\r\n            <ModalBody>\r\n            <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n            <Label htmlFor=\"Rating\">Rating</Label>\r\n            <Row className=\"form-group\">\r\n                <Col md={12}>\r\n                <Control.select model=\".rating\" id=\"rating\" className=\"form-control\"\r\n                validators={{\r\n                    required\r\n                }}>\r\n                <option></option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n              </Control.select>\r\n              <Errors\r\n              className=\"text-danger\"\r\n              model=\".rating\"\r\n              show=\"touched\"\r\n              messages={{\r\n                  required: 'Required ',\r\n              }}/>\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Label htmlFor=\"author\">Your Name</Label>\r\n            <Row className=\"form-group\">\r\n                <Col md={12}>\r\n                   <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                        placeholder=\"Your Name\"\r\n                        className=\"form-control\"\r\n                        validators={{\r\n                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                        }}\r\n                         />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".author\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required ',\r\n                            minLength: 'Must be greater than 2 characters',\r\n                            maxLength: 'Must be 15 characters or less'\r\n                        }}\r\n                     />\r\n                </Col>\r\n            </Row>\r\n            <Label htmlFor=\"comment\">Comment</Label>\r\n            <Row className=\"form-group\">\r\n                <Col md={12}>\r\n                   <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                        className=\"form-control\"\r\n                        rows=\"6\"\r\n                        validators={{\r\n                             maxLength: maxLength(150)\r\n                        }}\r\n                         />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".comment\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required',\r\n                            minLength: 'Must be greater than 2 characters',\r\n                            maxLength: 'Must be 100 characters or less'\r\n                        }}\r\n                     />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Col md={{ size: 10, offset: 0 }}>\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                        Send Feedback\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </LocalForm>\r\n                \r\n            </ModalBody>\r\n        </Modal>\r\n            )\r\n        }\r\n\r\n\r\n        if(props.DishComment!=null){\r\n         console.log(props.DishComment)\r\n         let idx = props.DishComment.length\r\n        let commentsAll = props.DishComment.map(\r\n            (cmts,index)=>(\r\n                    <div>\r\n                    <CardBody>\r\n                    <CardText>{cmts.comment}</CardText>\r\n                    <CardText>--{cmts.author} {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(cmts.date)))}</CardText>\r\n                    {index==idx-1?<Button outline onClick={handleComment} ><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>:null}\r\n                    </CardBody>\r\n                    </div> \r\n                )\r\n        )\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h4>Comments</h4>\r\n                </div>\r\n                 {commentsAll}\r\n                 <CommentForm dishId={props.dishId} addComment={props.addComment}> </CommentForm>\r\n                 \r\n             </div>)\r\n            }\r\n            \r\n            // else\r\n            // return <div></div>\r\n    }\r\n\r\n    function renderDish(dish) {\r\n        if (dish != null)\r\n            return (\r\n            <div className=\"car\">\r\n                <div className=\"\">\r\n                    <Card>\r\n                    <CardImg top src={dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                      <CardTitle>{dish.name}</CardTitle>\r\n                      <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                        </Card>\r\n                        </div>\r\n\r\n                   </div>            \r\n            );\r\n        else\r\n            return (\r\n                <div></div>\r\n            );\r\n    }\r\n\r\n    const DishDetail = (props)=> {\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                    <Breadcrumb>\r\n\r\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n            <div className=\"row\">\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                      {renderDish(props.dish)}  \r\n                    </div>\r\n\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderDishComments DishComment={props.comments} addComment={props.addComment}\r\n                    dishId={props.dish.id}>\r\n                    </RenderDishComments>\r\n                    </div>\r\n\r\n                    {}\r\n                      \r\n             </div>\r\n             </div>\r\n        )\r\n    }\r\n\r\nexport default DishDetail;\r\n\r\n\r\n\r\n// class DishDetail extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n    \r\n\r\n//     renderDishComments(DishComment){\r\n//         if(DishComment!=null){\r\n//          console.log({DishComment})\r\n//         let commentsAll = DishComment.comments.map(\r\n//             (cmts)=>(\r\n//                     <div>\r\n//                     <CardBody>\r\n//                     <CardText>{cmts.comment}</CardText>\r\n//                     <CardText>--{cmts.author} {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(cmts.date)))}</CardText>\r\n//                     </CardBody>\r\n//                     </div> \r\n//                 )\r\n//         )\r\n\r\n//         return (\r\n//             <div>\r\n//                 <div>\r\n//                     <h4>Comments</h4>\r\n//                 </div>\r\n//                  {commentsAll}\r\n//              </div>)\r\n//             }\r\n            \r\n//             else\r\n//             return <div></div>\r\n//     }\r\n\r\n//     renderDish(dish) {\r\n//         if (dish != null)\r\n//             return (\r\n//             <div className=\"car\">\r\n//                 <div className=\"\">\r\n//                     <Card>\r\n//                     <CardImg top src={dish.image} alt={dish.name} />\r\n//                     <CardBody>\r\n//                       <CardTitle>{dish.name}</CardTitle>\r\n//                       <CardText>{dish.description}</CardText>\r\n//                     </CardBody>\r\n//                         </Card>\r\n//                         </div>\r\n\r\n//                    </div>            \r\n//             );\r\n//         else\r\n//             return (\r\n//                 <div></div>\r\n//             );\r\n//     }\r\n\r\n//     render() {\r\n//         console.log(this.props)\r\n//         let dataComments = this.props.dish;\r\n//         if(this.props.sendData!=null){\r\n//             console.log(12);\r\n//         }\r\n//         return (\r\n//             <div className=\"container\">\r\n//             <div className=\"row\">\r\n//                     <div className=\"col-12 col-md-5 m-1\">\r\n//                       {this.renderDish(this.props.dish)}  \r\n//                     </div>\r\n\r\n//                     <div className=\"col-12 col-md-5 m-1\">\r\n//                     {this.renderDishComments(this.props.dish)}\r\n//                     </div>\r\n                      \r\n//              </div>\r\n//              </div>\r\n//         )\r\n//     }\r\n\r\n// }\r\n\r\n// export default DishDetail;\r\n\r\n","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\dishes.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\configureStore.js",["121","122"],"import {createStore, combineReducers} from 'redux';\r\nimport { Reducer, initialState } from './reducer'\r\nimport  Dishes from './dishes';\r\nimport { Comments } from './comments';\r\nimport { Promotions } from './promotions';\r\nimport { Leaders } from './leaders';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            dishes: Dishes,\r\n            comments: Comments,\r\n            promotions: Promotions,\r\n            leaders: Leaders\r\n        })\r\n    \r\n    );\r\n\r\n    return store;\r\n}\r\n\r\n// export const ConfigureStore = () => {\r\n//     const store = createStore(\r\n//         Reducer, // reducer\r\n//         initialState, // our initialState\r\n//     );\r\n\r\n//     return store;\r\n//}\r\n\r\n\r\n\r\n","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\HomeComponent.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\reducer.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\ContactComponent.js",["123","124","125","126","127","128","129","130"],"\r\nimport React, { Component } from 'react';\r\n//import { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, Row, FormFeedback } from 'reactstrap';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Row, Col, Label } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst required = (val) => {console.log(val && val.length,{val}); return val && val.length;}\r\nconst maxLength = (len) => (val) => {/*console.log({len,val});*/ return !(val) || (val.length <= len);}\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // this.state = {\r\n        //     firstname: '',\r\n        //     lastname: '',\r\n        //     telnum: '',\r\n        //     email: '',\r\n        //     agree: false,\r\n        //     contactType: 'Tel.',\r\n        //     message: '',\r\n        //     touched: {\r\n        //         firstname: false,\r\n        //         lastname: false,\r\n        //         telnum: false,\r\n        //         email: false\r\n        //     }\r\n        // };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        //this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.handleBlur = this.handleBlur.bind(this);\r\n\r\n\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        // event.preventDefault();\r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // validate(firstname, lastname, telnum, email) {\r\n    //     const errors = {\r\n    //         firstname: '',\r\n    //         lastname: '',\r\n    //         telnum: '',\r\n    //         email: ''\r\n    //     };\r\n    //     if (this.state.touched.firstname && firstname.length < 3)\r\n    //         errors.firstname = 'First Name should be >= 3 characters';\r\n    //     else if (this.state.touched.firstname && firstname.length > 10)\r\n    //         errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n    //     if (this.state.touched.lastname && lastname.length < 3)\r\n    //         errors.lastname = 'Last Name should be >= 3 characters';\r\n    //     else if (this.state.touched.lastname && lastname.length > 10)\r\n    //         errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n    //     const reg = /^\\d+$/;\r\n    //     if (this.state.touched.telnum && !reg.test(telnum))\r\n    //         errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n    //     if(this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n    //         errors.email = 'Email should contain a @';\r\n\r\n    //     return errors;\r\n    // }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                   <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                placeholder=\"Last Name\"\r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                }}\r\n                                 />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".lastname\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}\r\n                             />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                placeholder=\"Tel. Number\"\r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                }}\r\n                                 />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".telnum\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 numbers',\r\n                                    maxLength: 'Must be 15 numbers or less',\r\n                                    isNumber: 'Must be a number'\r\n                                }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                placeholder=\"Email\"\r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required, validEmail\r\n                                }}\r\n                                 />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".email\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    validEmail: 'Invalid Email Address'\r\n                                }}\r\n                             />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                     </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\components\\AboutComponent.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\leaders.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\comments.js",[],["131","132"],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\shared\\promotions.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\dishes.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\leaders.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\promotions.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\comments.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\ActionTypes.js",[],"D:\\Web_Dev\\Coursera\\front_end_full_stack\\confusion\\src\\redux\\ActionCreators.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":1,"column":8,"nodeType":"139","messageId":"140","endLine":1,"endColumn":12},{"ruleId":"137","severity":1,"message":"141","line":3,"column":9,"nodeType":"139","messageId":"140","endLine":3,"endColumn":15},{"ruleId":"137","severity":1,"message":"142","line":3,"column":17,"nodeType":"139","messageId":"140","endLine":3,"endColumn":28},{"ruleId":"143","severity":1,"message":"144","line":35,"column":3,"nodeType":"145","messageId":"146","endLine":38,"endColumn":4},{"ruleId":"137","severity":1,"message":"147","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"148","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":15},{"ruleId":"137","severity":1,"message":"149","line":6,"column":8,"nodeType":"139","messageId":"140","endLine":6,"endColumn":18},{"ruleId":"137","severity":1,"message":"147","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"150","line":1,"column":37,"nodeType":"139","messageId":"140","endLine":1,"endColumn":46},{"ruleId":"137","severity":1,"message":"148","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":15},{"ruleId":"137","severity":1,"message":"151","line":3,"column":33,"nodeType":"139","messageId":"140","endLine":3,"endColumn":42},{"ruleId":"137","severity":1,"message":"152","line":3,"column":44,"nodeType":"139","messageId":"140","endLine":3,"endColumn":49},{"ruleId":"137","severity":1,"message":"153","line":3,"column":51,"nodeType":"139","messageId":"140","endLine":3,"endColumn":55},{"ruleId":"154","severity":1,"message":"155","line":44,"column":17,"nodeType":"156","endLine":47,"endColumn":20},{"ruleId":"154","severity":1,"message":"157","line":68,"column":20,"nodeType":"156","endLine":74,"endColumn":28},{"ruleId":"154","severity":1,"message":"158","line":90,"column":20,"nodeType":"156","endLine":96,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":133,"column":27,"nodeType":"161","messageId":"162","endLine":133,"endColumn":29},{"ruleId":"137","severity":1,"message":"163","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":17},{"ruleId":"137","severity":1,"message":"164","line":2,"column":19,"nodeType":"139","messageId":"140","endLine":2,"endColumn":31},{"ruleId":"165","severity":1,"message":"166","line":133,"column":29,"nodeType":"156","endLine":133,"endColumn":71},{"ruleId":"154","severity":1,"message":"157","line":149,"column":36,"nodeType":"156","endLine":155,"endColumn":44},{"ruleId":"154","severity":1,"message":"157","line":171,"column":33,"nodeType":"156","endLine":177,"endColumn":36},{"ruleId":"154","severity":1,"message":"157","line":193,"column":33,"nodeType":"156","endLine":199,"endColumn":36},{"ruleId":"154","severity":1,"message":"157","line":216,"column":33,"nodeType":"156","endLine":222,"endColumn":36},{"ruleId":"154","severity":1,"message":"167","line":238,"column":45,"nodeType":"156","endLine":240,"endColumn":47},{"ruleId":"154","severity":1,"message":"155","line":246,"column":37,"nodeType":"156","endLine":247,"endColumn":66},{"ruleId":"154","severity":1,"message":"158","line":256,"column":37,"nodeType":"156","endLine":258,"endColumn":68},{"ruleId":"133","replacedBy":"168"},{"ruleId":"135","replacedBy":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'Media' is defined but never used.","'DishDetail' is defined but never used.","'useEffect' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Form' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Reducer' is defined but never used.","'initialState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["170"],["171"],"no-global-assign","no-unsafe-negation"]